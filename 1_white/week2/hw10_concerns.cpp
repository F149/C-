///////////////////////////////////////////////////////////////////////////////
//
// У каждого из нас есть ежемесячные дела, каждое из которых нужно выполнять
// в конкретный день каждого месяца: оплата счетов за электричество, абонентская
// плата за связь и пр. Вам нужно реализовать работу со списком таких дел, а
// именно, обработку следующих операций:
//
// ADD i s
// Добавить дело с названием s в день i.
//
// NEXT
// Закончить текущий месяц и начать новый. Если новый месяц имеет больше
// дней, чем текущий, добавленные дни изначально не будут содержать дел.
// Если же в новом месяце меньше дней, дела со всех удаляемых дней необходимо
// будет переместить на последний день нового месяца.
//
// Обратите внимание, что количество команд этого типа может превышать 11.
//
// DUMP i
// Вывести все дела в день i.
//
// Изначально текущим месяцем считается январь. Количества дней в месяцах
// соответствуют Григорианскому календарю с той лишь разницей, что в
// феврале всегда 28 дней.
//
// Указание
// Для дописывания всех элементов вектора v2 в конец вектора v1 удобно
// использовать метод insert:
//    v1.insert(end(v1), begin(v2), end(v2));
//
// Формат ввода
// Сначала число операций Q, затем описания операций.
// Названия дел s уникальны и состоят только из латинских букв, цифр и
// символов подчёркивания. Номера дней i являются целыми числами и нумеруются
// от 1 до размера текущего месяца.
//
// Формат вывода
// Для каждой операции типа DUMP в отдельной строке выведите количество дел
// в соответствующий день, а затем их названия, разделяя их пробелом.
// Порядок вывода дел в рамках каждой операции значения не имеет.
//
// Пример
// Ввод:
//   12
//   ADD 5 Salary
//   ADD 31 Walk
//   ADD 30 WalkPreparations
//   NEXT
//   DUMP 5
//   DUMP 28
//   NEXT
//   DUMP 31
//   DUMP 30
//   DUMP 28
//   ADD 28 Payment
//   DUMP 28
//
// Вывод:
//   1 Salary
//   2 WalkPreparations Walk
//   0
//   0
//   2 WalkPreparations Walk
//   3 WalkPreparations Walk Payment
//
///////////////////////////////////////////////////////////////////////////////
#include <iostream>
#include <string>
#include <vector>
using namespace std;

int main() {
    int m = 0;
    vector<int> days_in_months = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
    int q;
    cin >> q;
    vector<vector<string>> v(31, vector<string>());

    for (int i = 0; i < q; ++i) {
        string operation_code;
        cin >> operation_code;
        if (operation_code == "ADD") {
            string s;
            int i;
            cin >> i;
            cin >> s;
            v[i-1].push_back(s);
        } else if (operation_code == "DUMP") {
            int i;
            cin >> i;
            cout << v[i-1].size();
            for (string s: v[i-1]) {
                cout << " " << s;
            }
            cout << endl;
        } else if (operation_code == "NEXT") {
            m += 1;
            if (m == 12) {
                m = 0;
            }
            if (m == 0) {
            } else {
                if (days_in_months[m] == 28) {
                    v[27].insert(end(v[27]), begin(v[28]), end(v[28]));
                    v[28].clear();
                    v[27].insert(end(v[27]), begin(v[29]), end(v[29]));
                    v[29].clear();
                    v[27].insert(end(v[27]), begin(v[30]), end(v[30]));
                    v[30].clear();
                } else if (days_in_months[m] == 30) {
                    v[29].insert(end(v[29]), begin(v[30]), end(v[30]));
                    v[30].clear();
                }
            }
        }
    }
    return 0;
}

